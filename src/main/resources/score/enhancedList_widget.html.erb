<%
  
   filter_id = widget_properties['filter']
   page_size = widget_properties['pageSize']
   filter = MeasureFilter.find_by_id(filter_id.to_i) if filter_id
   if filter
     filter.load_criteria_from_data
     if !filter.require_authentication? || logged_in?
       filter.set_criteria_value('display', 'list')
       filter.set_criteria_value('pageSize', page_size)
       filter.execute(self, :user => current_user)
       @widget_title = link_to h(filter.name), {:controller => 'measures', :action => 'filter', :id => filter.id, :display => 'list'}
%>

<% if widget_properties['displayFilterDescription'] || !widget_properties['displayFilterDescription'] %>
    <div style="padding-bottom: 5px">
      
    </div>
      <script type="text/javascript">
      
      //set a flag - true tells us the image src has been swapped, so we can stop searching for it
      var flag = false;      
      //set a flag - true tells us the href has been found, so we can stop searching for it
      var hrefFlag = false;
      
      var projectId = "";
      
      function changeImage() {
          // find all images on the page
          var images = document.getElementsByTagName('img');
          
          // iterate through all found images
          for (i=0; i<images.length; i++) {
          
          	// check that the images 7th parent has Class enhancedList and that the image contains "TRK" which is the image that will be replaced
          	if ((images[i].parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.className == "enhancedList") && (images[i].src.indexOf("TRK") != -1)) {
          		
              		var href = "";
              		if (hrefFlag == false) {
    				//goes through all the child nodes and if the child node is an href, set the flag to true to stop searching
    				var children = images[i].parentNode.children;
    				for (j=0; j < children.length; j++) {
    					if (children[j].href) {
    						href = children[j].href;
    						
    						console.log(href);
    					}
    				}
			}
			//extract the project id number from the href
			var beginning = href.lastIndexOf("/");
			projectId = href.substring(++beginning);
			
			//checks to see if there is an existing image for the project
			function file_exists (url) {
			// Returns true if filename exists and false if it does not exist 
			var req = this.window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
			if (!req) {throw new Error('XMLHttpRequest not supported');}
			// HEAD Results are usually shorter (faster) than GET
			req.open('HEAD', url, false);
			req.send(null);
			if (req.status == 200){
			return 1;//returns true
				}
			return 0; //returns false
			}
			//checking to see if the image for a particular project exists.  Assuming the name of the file 
			//is the same as the project id
			var imageExists = file_exists("/images/profiles/projects/" + projectId + ".png");
	  
              				//if the file/image is found, set the image to the image.png for that project
					if (imageExists) {
						images[i].src="/images/profiles/projects/" + projectId + ".png";
					}
					//if the file/image is not found, set the image for the project to the default image
					else {
						images[i].src="/images/profiles/projects/default.png";
					}
	             		
              }
      	}
      	//set both flags to true so the searchs for the img tag and href will stop
      	flag = true;
        hrefFlag = true;

      }   
       
      
      var readyStateCheckInterval = setInterval(function() {
     
    if ((document.readyState === "complete") && (flag != true)) {
        //set the new image
        changeImage();             
        clearInterval(readyStateCheckInterval);
    }
}, 10);
 </script>
  <% end %>

  
  <% if widget_properties['displayFilterDescription'] && !filter.description.blank? %>
    <div style="padding-bottom: 5px">
      <span class="note"><%= h filter.description -%></span>
    </div>
  <% end %>

    <%= render :partial => "measures/display_#{filter.display.key}", :locals => {:edit_mode => false, :filter => filter, :widget_id => widget.id} -%>
<%
     end
   else
%>
  <p><%= image_tag 'warning.png' %> <%= message 'measure_filter.widget.unknown_filter_warning' -%></p>
<%
   end
%>