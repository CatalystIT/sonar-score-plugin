<!--
	Copyright 2013 Catalyst IT Services

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<%
  
   #finds all the properties for the sonar.score.projectGroup property
   properties = Property.find(:all, :conditions => {:prop_key => "sonar.score.projectGroup"})
   
   #variable that holds the project group name
   projectGroup = nil
   
   #array that holds projects
   projects = Project.find(:all, :conditions => {:scope => "PRJ"})
   
   #variable that holds the project name
   projectName = nil
   
   #finds needed metrics
   pointsMetric = Metric.find(:all, :conditions =>{:name =>"points"})
   coverageMetric = Metric.find(:all, :conditions =>{:name =>"coverage"})
   rulesComplianceMetric = Metric.find(:all, :conditions =>{:name =>"violations_density"})
   docApiMetric = Metric.find(:all, :conditions =>{:name =>"public_documented_api_density"})   
   
   #variable that holds the snapshotId
   snapShotId = nil
   
   #finds all "islast" snapshots 
   snapshots = Snapshot.find(:all, :conditions =>{:islast => "1"})
   
   projectName = nil
   projectImage = nil
   
   #set all metrics to zero
   pointsValue = 0
   
    
          
%>

<!--Loops through the properties array that contains all the groups of projects for the 
sonar.score.projectGroup property.  If the resourceId is equal to the project that has been selected
then set the projectGroup variable to the @Property variable. 
-->
<% for @Property in properties %>
<% if (@Property.resource_id == @project.id)%>
<% projectGroup = @Property %>
<% end %>
<% end %>

<!--If the project selected is a member of a group...proceed -->
<% if (projectGroup != nil )%>
<h1 style="color:#4B9FD5" ><%=projectGroup.value -%></h1><br>

<div id="metricTableSpace" >
<table id = "metricsTable" class ="data" style = "table-layout:auto; width:100%" >
<thead id = "metricTableHead"> 
  <tr valign ="top" >
    <th align="left" ></th>
    <th id = "nameSpot" onclick = "showMetricsTable();" align="left" nowrap="" style = "width:40%">Name</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable(this);" id="points" title = "Points" style = "text-decoration:underline; cursor: pointer; width:15%" nowrap="">Points</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable(this);" id="coverage" title = "Coverage" style = "text-decoration:underline; cursor: pointer;width:15%" nowrap="">Coverage</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable(this);" id="rules" title = "Rules Compliance" style = "text-decoration:underline; cursor: pointer;width:15%" >Rules Compliance</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable(this);" id="docApi" title = "Documented API" style = "text-decoration:underline; cursor: pointer;width:15%"  >Documented API </th>
  </tr>    
  </thead>
  <tbody id = "tableBody" class = "tableBodyClass" >
  
<!--Retrieve all the resource ids for the projectGroup name -->
<% for @Property in Property.find(:all, :conditions => {:prop_key => "sonar.score.projectGroup"}) %>
<% if (@Property.value == projectGroup.value )%>
<tr class="<%= cycle('even', 'odd') -%>">
<td id = "image" align="left"  >
<span><img alt height = "16" title width = '16' src="/images/display?project_id=<%= @Property.resource_id -%>" onerror="this.src='/images/profiles/projects/default.png'" />
</span>

	<!--Loop through all the projects and if the project id = the resource id then print the project name -->
	<% for @Project in projects %>
	<% if (@Project.id == @Property.resource_id)%>
	<% projectName = @Project.kee %>
	<% projectImage = @Project.id %>	
	<td id = "name" class = "projectNames" nowrap=""><span class = "nameWidthClass" ><%= @Project.name -%></span><span></span></td>
	 
		
	<!--Loop through all the snapshots and if the project id = the resource id then set the snapshot id variable -->
	<% for @Snapshot in snapshots %>
	<% if (@Project.id == @Snapshot.project_id)%>
	<% snapshotId = @Snapshot.id %>
		
	<!--Retrieve each project's points, coverage, rules compliance and documented api measures and display them in the project comparison table-->
	
	<!--points value-->
     <% myPoints = ProjectMeasure.find(:all, :conditions =>{:metric_id => pointsMetric, :snapshot_id => snapshotId})%>
     <% if (myPoints.blank? || myPoints == nil)%>
      <td id ="pointsValue" class="pointsValue" align="right" nowrap="">-</td>
     <% else %>
        <% pointsValue = number_with_delimiter(myPoints[0].value.to_i, :delimiter => ',') %>
	    <td id ="pointsValue" class="pointsValue" align="right" nowrap=""><%= pointsValue -%></td>
     <% end %>
	
	<!--coverage value-->	
	<% myCoverage = ProjectMeasure.find(:all, :conditions =>{:metric_id => coverageMetric, :snapshot_id => snapshotId}) %>
     <% if (myCoverage.blank? || myCoverage == nil)%>
       <td id ="coverageValue" class="coverageValue" align="right" nowrap="">-</td>
     <% else %>
      <td id = "coverageValue" align="right" nowrap=""><%= myCoverage[0].value-%>%</td>
     <% end %>	
	  	
	<!--rules compliance value -->
	<% myRules =  ProjectMeasure.find(:all, :conditions =>{:metric_id => rulesComplianceMetric, :snapshot_id => snapshotId}) %>		
	  <% if (myRules.blank? || myRules == nil)%>
	     <td align="right" id = "rulesValue" nowrap="">-</td>	  		    
	  <% else %>
	    <td align="right" id = "rulesValue" nowrap=""><%= myRules[0].value-%>%</td>	    
	 <% end %>
		
	<!--documented API value -->
	<% myDocApi =  ProjectMeasure.find(:all, :conditions =>{:metric_id => docApiMetric, :snapshot_id => snapshotId}) %>	
      <% if (myDocApi.blank? || myDocApi == nil) %>
	    <td align="right" id ="docApiValue" nowrap="" >-</td> 	  	    
	  <% else %>
	   <td align="right" id ="docApiValue" nowrap="" ><%= myDocApi[0].value-%>%</td>
	  <% end %>
	  
	</tr>

<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
</tbody>
</table>
</div>
<% end %>
<div id="tablespace" style = "display: table-header-group; table-layout:auto;"></div>


<!------------------------------------ JAVASCRIPT---------------------------------------------------------------->

<!--<script src = "/javascripts/projectComparison.js" type="text/javascript"></script>-->
<script type="text/javascript">
var projectNamesArray = new Array();


<!--shows the bar graph table-->
function showBargraphTable(elem){
	
	//get the width size in pixels of the metricsTable
	var tableWidth = document.getElementById("metricsTable").offsetWidth;
	var tableWidthInPixels = tableWidth + "px";
	
	//hide the metrics table body (keep header)
	document.getElementById("tableBody").style.display = "none";
	
	//retrieves the header title
	var metric = elem.innerHTML;	
	//show the bar graph 
	document.getElementById("metricsTable").style.width = tableWidthInPixels;
	document.getElementById("tablespace").style.display =  "table-header-group";
	
	//if there are no metric values for a project, this replaces the "0" metric value
	//with a "-" and places the project's name as a tooltip	
	var metricAmountArray = document.getElementsByClassName("valueClass");
	var projectNameArray = document.getElementsByClassName("nameWidthClass");
	for (var i = 0; i < metricAmountArray.length; i++){
		var metricAmt = metricAmountArray[i].innerHTML;
		var projectName = projectNameArray[i].innerHTML;
		if (metricAmt == 0){
			metricAmountArray[i].innerHTML = "-";
			metricAmountArray[i].title = projectName;
			metricAmountArray[i].style.cursor = "pointer";			
		}
		
	}
		
	//change the name header to the metric selected header
	document.getElementById("nameSpot").innerHTML = metric;		
	document.getElementById("nameSpot").style.textDecoration = "underline";
	document.getElementById("nameSpot").style.color = "#4B9FD5";
	document.getElementById("nameSpot").title = "Click to display comparison table";
	document.getElementById("nameSpot").style.cursor = "pointer";
		
	//keep all headers the same width when displaying the bar graph
	//document.getElementById("leftThSpot").style.width = "2.30%";
	document.getElementById("nameSpot").style.width = "38.89%";
	document.getElementById("points").style.width = "14.65%";
	document.getElementById("coverage").style.width = "14.65%";
	document.getElementById("rules").style.width = "14.76%";
	document.getElementById("docApi").style.width = "14.76%";
			
}

<!--shows the project comparison table-->
function showMetricsTable(){
	//show the metric table
	document.getElementById("tablespace").style.display =  "none";	
	document.getElementById("tableBody").style.display = "table-header-group";
	document.getElementById("tableBody").style.tableLayout = "auto";
	
	//change the name header to the metric selected header
	document.getElementById("nameSpot").innerHTML = "Name";		
	document.getElementById("nameSpot").style.textDecoration = "none";
	document.getElementById("nameSpot").style.color = "#444";
	document.getElementById("nameSpot").title = "";
	
	//keep all headers the same width when displaying the bar graph
	//document.getElementById("leftThSpot").style.width = "2.30%";
	document.getElementById("nameSpot").style.width = "38.89%";
	document.getElementById("points").style.width = "14.65%";
	document.getElementById("coverage").style.width = "14.65%";
	document.getElementById("rules").style.width = "14.76%";
	document.getElementById("docApi").style.width = "14.76%";		
}


<!--puts the contents of the bar graph table in the table space div-->
function putsTableContentsIntoTableSpaceDiv(tablecontents){
	//gets the bar graph
	document.getElementById("tablespace").innerHTML = tablecontents;
}

<!--Retrieves metric title and displays it under the project comparison widget table-->
function retrieveTitle(elem){		
	//retrieves the header title
	var metric = elem.innerHTML;
	//retrieves the header id
	var metricId = elem.id;
	//creates a new table/bargraph	
	createTable(metricId, metric);				
}
 
 <!--Retrieves the number of 'td' elements in the metrics table-->
function getNumberOfElementsInTable(){
	//retrieves the number of 'td' elements in the metrics table
	var numberOfTdElements = document.getElementById('metricsTable').getElementsByTagName('td').length;	
	return numberOfTdElements;
} 

 <!--Retrieves the number of 'th' elements in the metrics table representing the number of columns-->
function getNumberOfColumnsInTable(){
	//retrieves the number of 'th' elements in the metrics table
	var numberOfThElements = document.getElementById('metricsTable').getElementsByTagName('th').length;	
	return numberOfThElements;	
}
<!--Removes commas and percentage signs from a string-->
function removeCommasOrPercentage(metricString) {
    var metricValueAsNumber;
    	if (metricString != 0 ){
    	  if(metricString.indexOf(',') != -1){  			
  			  metricValueAsNumber= metricString.replace(/,/g,'');  			
		  }else if(metricString.indexOf('%') != -1){
			  metricValueAsNumber = (metricString.replace(/%/g,'')) * 100 ;
		  }else{
			  metricValueAsNumber = metricString;
		  }
		}
   
    return metricValueAsNumber;
}

<!--Retrieves the largest metric value from the metric selected in order to calculate the bar graph scale-->
function getBarGraphScale(metricsArray){	
	var tableWidth = document.getElementById("metricsTable").offsetWidth;
	//the bar graph width is about 40% of the table width
	var barGraphWidth = tableWidth/2.5; 
	largestNumber= Math.max.apply(Math, metricsArray);	
	var scale = barGraphWidth/largestNumber;	
	return scale; 
}

<!--Creates the bars from the metric the user selects-->
function showBars(metric, scale, noOfRows){  	
 	var projectName;
 	var shortName;
 	 
 	for(var i = 0; i < noOfRows; i++ ){
 	 	//retrieves the name element
 	 	var previousElement = document.getElementById("name" + [i]);
 	 	//retrieves the project name
 		var names = document.getElementById("name" + [i]).innerHTML;
 		projectName = document.getElementById('metricsTable').getElementsByClassName('nameWidthClass')[i].innerHTML;
 		//retrieves truncated name
 		shortName = document.getElementById("truncName" + [i]).innerHTML;
 		//retrieves the metric value 
 		var metricValue = document.getElementById(metric + [i]).innerHTML;
 		if (metricValue == "-"){
 			metricValue = 0;
 		} 		
 		//calculates the bar graph width 
 		var barWidth = 0;
 		if (metricValue != 0){
 			barWidth = removeCommasOrPercentage(metricValue) * scale; 
 		}
 		//creates a span id to use to retrieve the project bar width
 		var spanId = "span" + i;
 		//alternates color row based on the row number
 		var color = getColor(i);
 		//create a bar based on the metric value.  Used to calculate the name width.
 		previousElement.innerHTML = "<span style='display:inline-block; overflow: hidden; '></span><span id = "+spanId+" style = 'display: inline-block; overflow: hidden; white-space:nowrap ;background-color: "+ color +"; width:"+ barWidth + "px';>"+names+"</span><span style='display:inline-block; width:6px'><span class = 'valueClass' style = 'display:inline-block'>"+metricValue+"</span>";
   	} 	 	
 	checkNameFormat(noOfRows, metric);	
}

<!--this function makes sure that the project name does not overflow the width of the metric's bar-->
function checkNameFormat(noOfRows, metric){
	
	//loop through each row to retrieve the project name width, the project bar width and the project's truncated name width
	for (var i = 0; i < noOfRows; i ++){
	var nameWidth = document.getElementById("nameId" + i);
	var barWidth = document.getElementById("span" + i); 
	var truncName = document.getElementById("truncName" + i);
	var projectNameWidth = 0;
	var projectBarWidth = 0;
	var truncatedNameWidth = 0;
	var truncatedNameWidth = 0;
	
	if (nameWidth != null){
		projectNameWidth = nameWidth.offsetWidth;
	}
	
	if (barWidth != null){
		projectBarWidth = barWidth.offsetWidth;
	}
	
	if (truncName != null){
		truncatedNameWidth = truncName.offsetWidth;	
	}
	
 	var projectName = document.getElementById('metricsTable').getElementsByClassName('nameWidthClass')[i].innerHTML;  
 	//retrieve the projects truncated name
 	shortName = truncateName(projectName);
 	//retrieve the element  	
 	var element = document.getElementById('tablespace').getElementsByClassName('nameWidthClass')[i]; 
 	var elementTitle = element.innerHTML;	
 	
 	//if the project name is greater than the bar width add a project name tool tip displaying the projects full name to the element 	
 		if (projectNameWidth > projectBarWidth){  			
 			element.title = projectName;
 			//if the truncatedName is greater than the bar width eliminate the name altogether, else add the project's truncated name to the bar  	 	  	 	 	 	 	
 	 		if (truncatedNameWidth >= projectBarWidth){ 	 	 
 	 				element.innerHTML = "&nbsp;"; 		
 	 			  	 	 	
 	 	 		}else{
 	 	 			element.innerHTML = shortName;
 	 	 			 	 	 		
 	 	 		} 
 	 	 	}
  		}

} 

<!--Truncates the project name to the first three letters of the name and adds (...).  A user may hover over the shortened name to see the full name-->
function truncateName( projectName ){
	var newName;
	newName= projectName.substring(0, 3) + '...';
	return newName;
}

<!--Alternates row colors between blue, red and yellow-->
function getColor( row ){
	var rowColor;
	
	if ( row%3 == 0 || (row == 0)){
		rowColor = "#CAE3F2";//returns blue		
	}else if ( (row - 1) == 0 || ((row -1)%3)==0 ){
		rowColor = "#e9a1a1"; //returns red
	}else{	 
	  rowColor = "#FFF6BF"; //returns yellow
	}
	return rowColor;

}
 
 <!--Dynamically creates the table with the selected metric, team image and team name--> 
  function createTable(metric, barGraphTitle){ 
  	//this is the metric's id: (coverage, points...etc. depending on what the user selected)
	var metricValue = metric +"Value";	
	//once createTable function is complete and the bars are created...this variable is used to pass the 
	//metric selected value along
	var idName = metric;   
    //retrieves number of table elements, rows and columns
    
    var elements =getNumberOfElementsInTable();
    var columns = getNumberOfColumnsInTable();
    var noOfRows = elements/columns;
    //variables representing if a new row needs to be created in the table and if the metric selected has been found
    var newRow; 
    var metricFound;
    
    //variables holding the tables data elements
    var image;
    var metric;
    var metricAsNumber;
    var projectName;
    
    //array to hold metric values 
    var metricArray = new Array();   
                            
    //create a new table depending on what metric the user selected
    var tablecontents = "";
    tablecontents = "<table id = 'barGraphTable' style='table-layout: auto; width: 100%'  class = 'data'> " +
    
    "<tbody id = 'barGraphBody' style = 'border: 0px; width: 100%' > ";      
     
   
   	var idGenerator = 0;
   	var imageIdGenerator = 0;
   	var nameIdGenerator = 0;
   	var divGenerator = 0;
   	var count = 0;
   	//go through each element for each row in the metrics table, extracting the needed information
      for (var i = 0; i < elements; i ++){ 
      	newRow = false;
      	//row creation is based on the number of columns. Create a new row if the expression evaluates to true      	
      	if ( (i + columns) % columns == 0 ){
      	tablecontents += "<tr class = 'tablespaceRows' align = 'left' style = 'border: 0px' >";
      	//new row...now looking for the next row's metric value
      	metricFound = false;
      	}
   		   		
   		//retrieve the element's id to verify what metrics need to be selected
   		var elementId = document.getElementById('metricsTable').getElementsByTagName('td')[i].id;   			
   			
   			//retrieve the image, if the td element id is "image"
   			if (elementId == "image"){
   				//retrieve the element's value and add it to the new table
   				image = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;   				
   				var imageIdGenerator = "image" + count;
   				tablecontents += "<td id = '" + imageIdGenerator + "'align='left' width = '16px'>" + image + "</td>";
   				   				
   			}
   			//retrieve the name, if the td element id is "name"
   			if (elementId == "name"){
   				//retrieve the element's value and add it to the new table
   				 projectName = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;
   				 //used to calculate the width of the project's truncated name to compare with selected metric's bar width
   				 var nameWithSpanTags = document.getElementById('metricsTable').getElementsByTagName('td')[i];   				 
 	 	         var correctName = nameWithSpanTags.getElementsByTagName('span')[0].innerHTML;   				 
   				 var shortName = truncateName (correctName);   				 
   				
   				 nameIdGenerator = "name" + count;
   				 var truncatedNameId = "truncName" + count;
   				 var nameId = "nameId" + count;
   				 tablecontents += "<td id = '" + nameIdGenerator + "'style = 'border: 0px' align='left'><span class = 'longName' id ='" + nameId + "'>  " + projectName + "</span></td>";
   				 //hidden td to use for calculating the project's truncated project's name width
   				  tablecontents += "<td style = 'visibility: hidden'nowrap=''><span id =  '" + truncatedNameId + "'nowrap='' >" + shortName + "</span></td>";
   				 				
   			}
   			//retrieve the correct metric values
   			if (elementId != "name" && elementId != "image" ){     				
   					//if the element's id is equal to the metric category selected and the selected metric hasn't been found yet
   					if (metricFound == false && (( elementId == metricValue)) ){
   						 metric = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;
   						 if (metric == "-"){
   						 	metric = 0;
   						 	metricArray.push(metric);
   						 }
   						 
   						 if (metric != 0){
   						   metricAsNumber = parseInt(removeCommasOrPercentage(metric));   						 
   						   metricArray.push(metricAsNumber);
   						}
   						 idGenerator = idName + count;   			
   						 divGenerator = "div" + count;   							    						    						 
   					     	 tablecontents += "<td style = 'display: none' id = '" + idGenerator + "'nowrap='' align='left' >" + metric + "</td>";
   					  	 metricFound = true; 
   						 newRow = true;  
   						 count++					   						
   						}
   						
   			}
   		   //if the new row property set to true, end the creation of a new row
   		   if(newRow){
      		 tablecontents += "</tr>";       	 	       		          
      		} 		
      	    		 		
       }     
   	tablecontents += "</tbody>";
   	tablecontents += "</table>";   	
   	var scale = getBarGraphScale(metricArray);         
        putsTableContentsIntoTableSpaceDiv(tablecontents); 
        showBars( idName, scale, noOfRows );         
    		         
}     
</script>

<!--The project that is selected must be a member of a group.  If they're not...an error message 
is returned -->

<% if (projectGroup == nil )%>
<div class = "widget-title"><%= widget_properties['groupId'] -%></div><br>
<p><%=@project.long_name -%> is not a member of any group.</p>
<% end %>
 


