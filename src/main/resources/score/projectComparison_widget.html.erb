<%
  
   #finds all the properties for the sonar.score.projectGroup property
   properties = Property.find(:all, :conditions => {:prop_key => "sonar.score.projectGroup"})
   
   #variable that holds the project group name
   projectGroup = nil
   
   #array that holds projects
   projects = Project.find(:all, :conditions => {:scope => "PRJ"})
   
   #variable that holds the project name
   projectName = nil
   
   #finds needed metrics
   pointsMetric = Metric.find(:all, :conditions =>{:name =>"points"})
   coverageMetric = Metric.find(:all, :conditions =>{:name =>"coverage"})
   rulesComplianceMetric = Metric.find(:all, :conditions =>{:name =>"violations_density"})
   docApiMetric = Metric.find(:all, :conditions =>{:name =>"public_documented_api_density"})   
   
   #variable that holds the snapshotId
   snapShotId = nil
   
   #finds all "islast" snapshots 
   snapshots = Snapshot.find(:all, :conditions =>{:islast => "1"})
   
   projectName = nil
   projectImage = nil
    
%>

<!--Loops through the properties array that contains all the groups of projects for the 
sonar.score.projectGroup property.  If the resourceId is equal to the project that has been selected
then set the projectGroup variable to the @Property variable. 
-->
<% for @Property in properties %>
<% if (@Property.resource_id == @project.id)%>
<% projectGroup = @Property %>
<% end %>
<% end %>

<!--If the project selected is a member of a group...proceed -->
<% if (projectGroup != nil )%>
<h1 style="color:#4B9FD5" ><%=projectGroup.value -%></h1><br>

<div id="metricTableSpace">
<table id = "metricsTable" class ="data" style = "table-layout:auto; width:100%" >
<thead> 
  <tr valign ="top">
    <th align="right" width = "50"></th>
    <th align="left" nowrap="" style = "width:40%">Name</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable();" id="points" title = "Points" style = "text-decoration:underline; cursor: pointer; width:15%" nowrap="">Points</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable();" id="coverage" title = "Coverage" style = "text-decoration:underline; cursor: pointer;width:15%" nowrap="">Coverage</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable();" id="rules" title = "Rules Compliance" style = "text-decoration:underline; cursor: pointer;width:15%" >Rules Compliance</th>
    <th class="right" onclick="retrieveTitle(this); showBargraphTable();" id="docApi" title = "Documented API" style = "text-decoration:underline; cursor: pointer;width:15%"  >Documented API </th>
  </tr>    
  </thead>
  <tbody id = "tableBody" >

<!--Retrieve all the resource ids for the projectGroup name -->
<% for @Property in Property.find(:all, :conditions => {:prop_key => "sonar.score.projectGroup"}) %>
<% if (@Property.value == projectGroup.value )%>
<tr class="<%= cycle('even', 'odd') -%>">
<td id = "image" align="right" width = "50" >
<span><img alt height = "16" title width = '16' src="/images/display?project_id=<%= @Property.resource_id -%>" onerror="this.src='/images/profiles/projects/default.png'" />
</span>

	<!--Loop through all the projects and if the project id = the resource id then print the project name -->
	<% for @Project in projects %>
	<% if (@Project.id == @Property.resource_id)%>
	<% projectName = @Project.kee %>
	<% projectImage = @Project.id %>	
	<td id = "name" class = "projectNames" nowrap=""><span class = "nameWidthClass" ><%= @Project.name -%></span><span></span></td>
	 
		
	<!--Loop through all the snapshots and if the project id = the resource id then set the snapshot id variable -->
	<% for @Snapshot in snapshots %>
	<% if (@Project.id == @Snapshot.project_id)%>
	<% snapshotId = @Snapshot %>
	
	
	<!--Loop through all the project measures and if the snapshot id for the project 
	 equals the snapshot id from the snapshot table then retrieve
	 metric values for all the projects in the group -->
	
	<!--points value-->
	<% for @ProjectMeasure in ProjectMeasure.find(:all, :conditions =>{:metric_id => pointsMetric}) %>
	<% if (@ProjectMeasure.snapshot_id == @Snapshot.id)%>
	<% pointsName = @ProjectMeasure.short_name %>
	<% pointsValue = number_with_delimiter(@ProjectMeasure.value.to_i, :delimiter => ',') %>
	<td id ="pointsValue" class="pointsValue" align="right" nowrap=""><%= pointsValue -%></td>
	
		
	<!--coverage value-->
	<% for @ProjectMeasure in ProjectMeasure.find(:all, :conditions =>{:metric_id => coverageMetric}) %>	
	<% if (@ProjectMeasure.snapshot_id == @Snapshot.id)%>
	<% coverageValue = @ProjectMeasure %>
	<td id = "coverageValue" align="right" nowrap=""><%= @ProjectMeasure.value -%>%</td>
	
	<!--rules compliance value -->
	<% for @ProjectMeasure in ProjectMeasure.find(:all, :conditions =>{:metric_id => rulesComplianceMetric}) %>	
	<% if (@ProjectMeasure.snapshot_id == @Snapshot.id)%>
	<% rulesComplianceValue = @ProjectMeasure %>
	<td align="right" id = "rulesValue" nowrap=""><%= @ProjectMeasure.value -%>%</td>
	
	<!--documented API value -->
	<% for @ProjectMeasure in ProjectMeasure.find(:all, :conditions =>{:metric_id => docApiMetric}) %>	
	<% if (@ProjectMeasure.snapshot_id == @Snapshot.id)%>
	<% documentedApiValue = @ProjectMeasure %>
	<td align="right" id ="docApiValue" nowrap="" ><%= @ProjectMeasure.value -%>%</td>
	
	</tr>
	</tbody>
	
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
</table>
</div>
<% end %>


<br><h1 style="color:#4B9FD5; text-decoration:underline; cursor: pointer" id = "title" title = "Remove graph" onclick = "hideBargraphTable();" ></h1><br>

<div id="tablespace"></div>

<!------------------------------------ JAVASCRIPT---------------------------------------------------------------->

<!--<script src = "/javascripts/projectComparison.js" type="text/javascript"></script>-->
<script type="text/javascript">

<!--hides the metrics table-->
function hideTable(){
	document.getElementById("metricsTable").style.visibility =  "hidden"; 
	
}

<!--Displays the metrics table-->
function displayTable(){
	document.getElementById("metricsTable").style.visibility =  "visible"; 
}

<!--hides the bar graph table-->
function hideBargraphTable(){
	document.getElementById("tablespace").style.display =  "none";
	document.getElementById("title").style.display =  "none"; 
		
}

<!--shows the bar graph table-->
function showBargraphTable(){
	document.getElementById("tablespace").style.display =  "table";
	document.getElementById("title").style.display =  "inline";
	
	 
}

<!--Retrieves metric title and displays it under the project comparison widget table-->
function retrieveTitle(elem){
	 
	//retrieves the header title
	var metric = elem.innerHTML;
	//retrieves the header id
	var metricId = elem.id;
	var drilldownTitle = document.getElementById("title");
	drilldownTitle.innerHTML = metric;
	
	//creates a new table 
	createTable(metricId);
			
}
 
 <!--Retrieves the number of 'td' elements in the metrics table-->
function getNumberOfElementsInTable(){
	//retrieves the number of 'td' elements in the metrics table
	var numberOfTdElements = document.getElementById('metricsTable').getElementsByTagName('td').length;	
	return numberOfTdElements;
} 

 <!--Retrieves the number of 'th' elements in the metrics table representing the number of columns-->
function getNumberOfColumnsInTable(){
	//retrieves the number of 'th' elements in the metrics table
	var numberOfThElements = document.getElementById('metricsTable').getElementsByTagName('th').length;	
	return numberOfThElements;	
}
<!--Removes commas and percentage signs from a string-->
function removeCommasOrPercentage(metricString) {
    var metricValueAsNumber = 0;
    	if(metricString.indexOf(',') != -1){  			
  			metricValueAsNumber= metricString.replace(/,/g,'');  			
		}
	
		if(metricString.indexOf('%') != -1){
			metricValueAsNumber = (metricString.replace(/%/g,'')) * 100 ;
		  }
   
    return metricValueAsNumber;
}

<!--Retrieves the largest metric value from the metric selected in order to calculate the bar graph scale-->
function getBarGraphScale(metricsArray){
	var tableWidth = document.getElementById("metricsTable").offsetWidth;
	var barGraphWidth = tableWidth/2.5;
	largestNumber= Math.max.apply(Math, metricsArray);
	var scale = barGraphWidth/largestNumber;
	return scale; 
}
  
<!--Creates the bars from the metric the user selects-->
function showBars(metric, scale, noOfRows){  
 	var projectName;
 	var shortName;
 	for(var i = 0; i < noOfRows; i++ ){
 	 	//retrieves the name element
 	 	var previousElement = document.getElementById("name" + [i]);
 	 	//retrieves the project name
 		var names = document.getElementById("name" + [i]).innerHTML;
 		//retrieves the metric value
 		var metricValue = document.getElementById(metric + [i]).innerHTML;
 		//calculates the bar graph width 
 		var barWidth = removeCommasOrPercentage(metricValue) * scale;
 		//creates a span id if needed later
 		var spanId = "span" + i;
 		//alternates color row based on the row number
 		var color = getColor(i);
 		
 		//creates a bar graph based on the project's metric's bar width, creates the bar and displays the project name on top of the bar and the metric value at the end (to the right) of the bar
 		//a tool tip with the project's name appears if the metric value (bar width) is less than the length of the project's name
 		
 		//create a bar based on the metric value.  Used to calculate the name width.
 		previousElement.innerHTML = "<span style='display:inline-block; overflow: hidden; width:10px'></span><span id = "+spanId+" style = 'display: inline-block; overflow: hidden; white-space:nowrap ;background-color: "+ color +"; width:"+ barWidth + "px';>"+names+"</span><span style='display:inline-block; width:6px'><span style = 'display:inline-block'>"+metricValue+"</span>";
 	 	
 	 	//if the name width is greater than the bar width, truncate the project name and put in a tool tip so the user may view the whole project name
 	 	//if the bar is greater than 50px wide, else...eliminate the name in the bar all together (keep the tool tip with the name though)
 	 	var limitedBarWidth = 50; 	 	
 	 	var projectNameWidth = document.getElementById("nameId" + i).offsetWidth;
 	 	var projectBarWidth = document.getElementById("span" + i).offsetWidth;
 	 	
 	 	if( projectNameWidth > projectBarWidth ){
 	 		if (projectNameWidth > limitedBarWidth ){
 	 			projectName = document.getElementById('metricsTable').getElementsByClassName('nameWidthClass')[i].innerHTML;
 				shortName = truncateName(projectName);
 				document.getElementById("name" + i).innerHTML = "<span style='display:inline-block; overflow:hidden; width:10px'></span><span id = "+spanId+" title = '"+projectName+"'  style = 'display: inline-block; white-space:nowrap ;background-color: "+ color +"; width:"+ barWidth + "px';>"+shortName+"</span><span style='display:inline-block; width:6px'><span style = 'display:inline-block'>"+metricValue+"</span>";
 	 		}else{
 	 			projectName = document.getElementById('metricsTable').getElementsByClassName('nameWidthClass')[i].innerHTML;
 	 			//shortName = "&nbsp;";
 	 			document.getElementById("name" + i).innerHTML = "<span style='display:inline-block; overflow:hidden; width:10px'></span><span id = "+spanId+" title = '"+projectName+"'  style = 'display: inline-block; white-space:nowrap ;background-color: "+ color +"; width:"+ barWidth + "px';>&nbsp;</span><span style='display:inline-block; width:6px'><span style = 'display:inline-block'>"+metricValue+"</span>";
 	 	 	}
 		}
 	}
 	
 	  	
}

<!--Truncates the project name to the first three letters of the name and adds (...).  A user may hover over the shortened name to see the full name-->
function truncateName( projectName ){
	var newName;
	newName= projectName.substring(0, 3) + '...';
	return newName;
}

<!--Alternates row colors between blue, red and yellow-->
function getColor( row ){
	var rowColor;
	
	if ( row%3 == 0 || (row == 0)){
		rowColor = "#CAE3F2";//returns blue		
	}else if ( (row - 1) == 0 || ((row -1)%3)==0 ){
		rowColor = "#e9a1a1"; //returns red
	}else{	 
	  rowColor = "#FFF6BF"; //returns yellow
	}
	return rowColor;

}
 
 <!--Dynamically creates the table with the selected metric, team image and team name--> 
  function createTable(metric){ 
  	showBargraphTable();
	//this is the metric's id: (coverage, points...etc. depending on what the user selected)
	var metricValue = metric +"Value";	
	//once createTable function is complete and the bars are created...this variable is used to pass the 
	//metric selected value along
	var idName = metric;   
    //retrieves number of table elements, rows and columns
    var elements =getNumberOfElementsInTable();
    var columns = getNumberOfColumnsInTable();
    var noOfRows = elements/columns;
    //variables representing if a new row needs to be created in the table and if the metric selected has been found
    var newRow; 
    var metricFound;
    
    //variables holding the table's data elements
    var image;
    var metric;
    var metricAsNumber;
    var projectName;
    
    //array to hold metric values 
    var metricArray = new Array();   
                            
    //create a new table depending on what metric the user selected
    var tablecontents = "";
    tablecontents = "<table id = 'barGraphTable' style='table-layout: auto; width: 100%'  border='0'> " +
    
    "<thead style = 'border: 0px'>" + 
   	"<tr style = 'border: 0px'>"+
    "<th style = 'border: 0px' align='right' width = '50'></th>" +
    "<th style = 'border: 0px'></th>"+
    "<th style = 'border: 0px'></th>"+    
    "</tr>"+    
    "</thead> " +
    "<tbody style = 'border: 0px'> ";      
     
   //go through each element for each row in the metrics table, extracting the needed information
   	var idGenerator = 0;
   	var imageIdGenerator = 0;
   	var nameIdGenerator = 0;
   	var divGenerator = 0;
   	var count = 0;
   	
      for (var i = 0; i < elements; i ++){ 
      	newRow = false;
      	//row creation is based on the number of columns. Create a new row if the expression evaluates to true      	
      	if ( (i + columns) % columns == 0 ){
      	tablecontents += "<tr style = 'border: 0px' width= '450px' >";
      	//new row...now looking for the next row's metric value
      	metricFound = false;
      	}
   		   		
   		//retrieve the element's id to verify what metrics need to be selected
   		var elementId = document.getElementById('metricsTable').getElementsByTagName('td')[i].id;   			
   			
   			//retrieve the image, if the td element id is "image"
   			if (elementId == "image"){
   				//retrieve the element's value and add it to the new table
   				image = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;   				
   				var imageIdGenerator = "image" + count;
   				tablecontents += "<td id = '" + imageIdGenerator + "'style = 'border: 0px' align='right'>" + image + "</td>";
   				   				
   			}
   			//retrieve the name, if the td element id is "name"
   			if (elementId == "name"){
   				//retrieve the element's value and add it to the new table
   				 projectName = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;
   				 nameIdGenerator = "name" + count;
   				 var nameId = "nameId" + count;
   				 tablecontents += "<td id = '" + nameIdGenerator + "'style = 'border: 0px' align='left'><span id ='" + nameId + "'>  " + projectName + "</span></td>";
   				   				
   			}
   			//retrieve the correct metric values
   			if (elementId != "name" && elementId != "image" ){     				
   					//if the element's id is equal to the metric category selected and the selected metric hasn't been found yet
   					if (metricFound == false && (( elementId == metricValue)) ){
   						 metric = document.getElementById('metricsTable').getElementsByTagName('td')[i].innerHTML;
   						 metricAsNumber = parseInt(removeCommasOrPercentage(metric)); 
   						 metricArray.push(metricAsNumber);
   						 idGenerator = idName + count;
   						 divGenerator = "div" + count;   							    						    						 
   					     tablecontents += "<td style = 'display: none' id = '" + idGenerator + "'nowrap='' align='left' >" + metric + "</td>";
   					  	  metricFound = true; 
   						 newRow = true;  
   						 count++					   						
   						}
   						
   			}
   		   //if the new row property set to true, end the creation of a new row
   		   if(newRow){
      		 tablecontents += "</tr>"; 
      	 	       		          
      		} 		
      	    		 		
       }
     
   	tablecontents += "</tbody>";
   	tablecontents += "</table>";
   	document.getElementById("tablespace").innerHTML = tablecontents; 
    var scale = getBarGraphScale(metricArray);
    showBars( idName, scale, noOfRows );    
        
}     

</script>

<!--The project that is selected must be a member of a group.  If they're not...an error message 
is returned -->

<% if (projectGroup == nil )%>
<div class = "widget-title"><%= widget_properties['groupId'] -%></div><br>
<p><%=@project.long_name -%> is not a member of any group.</p>
<% end %>
 


